apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run:  geode-source-rabbit
  name:  geode-source-rabbit
spec:
  replicas: 1
  selector:
    matchLabels:
      name:  geode-source-rabbit
  template:
    metadata:
      labels:
        name:  geode-source-rabbit
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "opentelemetry-operator-system/otelinst"
    spec:
      containers:
        - env:
            - name: server.port
              value: "8080"
            - name: geode.client.pdx-read-serialized
              value: "true"
            - name: geode.pool.connect-type
              value: locator
            - name: geode.pool.host-addresses
              value: "gemfire1-locator:10334"
            - name: geode.pool.subscription-enabled
              value: "true"
            - name: geode.region.region-name
              value: Event
            - name: geode.supplier.query
              value: "select * from /Event where chat.message.text.matches('.*URGENT.*') and chat.message.eventTimeStamp.eventTime.hour24 > 12"
            - name: spring.application.name
              value: geode-source-rabbit
            - name: spring.rabbitmq.host
              value: rabbitmq-hub
            - name: spring.rabbitmq.stream.host
              value: rabbitmq-hub
            - name: spring.rabbitmq.username
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-hub-user
                  key: username
            - name: spring.rabbitmq.password
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-hub-user
                  key: password
            - name: spring.data.gemfire.pool.locators
              valueFrom:
                configMapKeyRef:
                  name: gemfire1-config
                  key: locators
            - name: spring.cloud.stream.bindings.output.destination
              value: event-urgent-exchange
            - name: spring.cloud.stream.bindings.output.group
              value: gemfire-event
            - name: spring.cloud.stream.rabbit.bindings.output.consumer.quorum.enabled
              value: "true"
            - name: spring.cloud.stream.rabbit.bindings.output.consumer.bindingRoutingKey
              value: "#"
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 60 #wait seconds before performing the first probe
            periodSeconds: 5 #pecifies that the kubelet should perform a liveness probe every 3 seconds
            timeoutSeconds: 10 # Number of seconds after which the probe times out.
            failureThreshold: 60
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 60 #wait seconds before performing the first probe
            periodSeconds: 5 #pecifies that the kubelet should perform a liveness probe every 3 seconds
            timeoutSeconds: 10 # Number of seconds after which the probe times out.
            failureThreshold: 60
          image: springcloudstream/geode-source-rabbit:3.2.1
          name: geode-source-rabbit